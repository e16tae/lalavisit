name: CD - Production Deployment

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'k8s/overlays/production/deployment-patch.yaml'
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: lalavisit-frontend

permissions:
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Lalavisit Frontend
            org.opencontainers.image.description=라라재가방문요양센터 웹사이트
            org.opencontainers.image.vendor=Lalavisit

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_SITE_URL=${{ secrets.SITE_URL || 'https://www.lalavisit.com' }}
            NEXT_PUBLIC_KAKAO_CHANNEL_ID=${{ secrets.KAKAO_CHANNEL_ID }}
            NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION=${{ secrets.GOOGLE_VERIFICATION }}
            NEXT_PUBLIC_NAVER_SITE_VERIFICATION=${{ secrets.NAVER_VERIFICATION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Report build details
        run: |
          echo "## 🐋 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 5
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment annotation to trigger rollout
        id: update
        run: |
          cd k8s/overlays/production

          # Update deployment annotation with timestamp and commit SHA
          # This triggers ArgoCD to detect changes and K8s to pull latest image
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          OLD_REVISION=$(grep "deployment.kubernetes.io/revision:" deployment-patch.yaml | awk '{print $2}' | tr -d '"')
          NEW_REVISION="${{ github.sha }}-${TIMESTAMP}"

          sed -i "s|deployment.kubernetes.io/revision:.*|deployment.kubernetes.io/revision: \"${NEW_REVISION}\"|g" deployment-patch.yaml

          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add deployment-patch.yaml

          if git commit -m "chore: trigger deployment rollout for commit ${{ github.sha }} [skip ci]"; then
            git push
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "old_revision=${OLD_REVISION}" >> $GITHUB_OUTPUT
            echo "new_revision=${NEW_REVISION}" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "⚠️ No changes to commit" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Report manifest update
        if: steps.update.outputs.updated == 'true'
        run: |
          echo "## 📝 K8s Manifests Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Old Revision:** \`${{ steps.update.outputs.old_revision }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**New Revision:** \`${{ steps.update.outputs.new_revision }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ArgoCD will automatically sync these changes." >> $GITHUB_STEP_SUMMARY

  trigger-argocd-sync:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests
    timeout-minutes: 2

    steps:
      - name: ArgoCD Auto-Sync Notification
        run: |
          echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** \`main-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Monitor Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Check ArgoCD UI for sync status" >> $GITHUB_STEP_SUMMARY
          echo "- Watch pods: \`kubectl get pods -n lalavisit -w\`" >> $GITHUB_STEP_SUMMARY
          echo "- Check rollout: \`kubectl rollout status deployment/lalavisit-frontend -n lalavisit\`" >> $GITHUB_STEP_SUMMARY
