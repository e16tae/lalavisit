name: CD - Production Deployment

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: lalavisit-frontend

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npx tsc --noEmit

      - name: Build verification
        env:
          NEXT_PUBLIC_SITE_URL: https://www.lalavisit.com
        run: npm run build

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      packages: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_SITE_URL=https://www.lalavisit.com
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment annotation to trigger rollout
        run: |
          cd k8s/overlays/production

          # Update deployment annotation with timestamp and commit SHA
          # This triggers ArgoCD to detect changes and K8s to pull latest image
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          sed -i "s|deployment.kubernetes.io/revision:.*|deployment.kubernetes.io/revision: \"${{ github.sha }}-${TIMESTAMP}\"|g" deployment-patch.yaml

          # Commit and push changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add deployment-patch.yaml
          git commit -m "chore: trigger deployment rollout for commit ${{ github.sha }}" || echo "No changes to commit"
          git push

  trigger-argocd-sync:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests

    steps:
      - name: ArgoCD Auto-Sync Notification
        run: |
          echo "✅ Deployment pipeline completed!"
          echo ""
          echo "Image tag: main-${{ github.sha }}"
          echo "ArgoCD will automatically detect the manifest changes and sync"
          echo ""
          echo "Monitor deployment:"
          echo "  - ArgoCD UI: Check the lalavisit-production application"
          echo "  - Or run: kubectl get pods -n lalavisit -w"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-push, update-manifests]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.quality-checks.result }}" == "success" ] && [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.update-manifests.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"
          else
            echo "❌ Deployment failed!"
            echo ""
            echo "Job results:"
            echo "  - Quality checks: ${{ needs.quality-checks.result }}"
            echo "  - Build and push: ${{ needs.build-and-push.result }}"
            echo "  - Update manifests: ${{ needs.update-manifests.result }}"
            exit 1
          fi
